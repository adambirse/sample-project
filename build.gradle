allprojects {
    group 'com.birse'
    version '1.0.0-SNAPSHOT'

    apply plugin: 'java'
    apply plugin: 'idea'

    sourceCompatibility = 1.8
}

ext.database_name = 'sample'
ext.database_password = 'password'


build.enabled = false;
jar.enabled = false;

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}


subprojects {

    apply plugin: 'org.springframework.boot'
    apply plugin: 'docker'

        task prepareDockerFile(type: Copy) {

            ext.applicationName = 'default-service-name'
            outputs.upToDateWhen { false }
            from '../docker/'
            into 'src/main/docker/'
            include 'Dockerfile-template'
            rename 'Dockerfile-template', 'Dockerfile'
            filter {
                it.replaceAll('@version@', project.properties['version']).replaceAll('@app_name@', project.properties['applicationName'])
            }
        }

        task buildDocker(type: Docker, dependsOn: build) {
            push = false
            applicationName = 'default-service-name'
            dockerfile = file('src/main/docker/Dockerfile')
            doFirst {
                copy {
                    from jar
                    into stageDir
                }
            }
        }

        buildDocker.dependsOn prepareDockerFile

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        testCompile("org.springframework.boot:spring-boot-starter-test")
        testCompile("org.mockito:mockito-core:2.1.0")
        testCompile("org.hamcrest:hamcrest-all:1.3")


    }

    repositories {
        mavenCentral()
    }

    processResources {
        expand project.properties
    }

}

buildscript {

    ext {
        springBootVersion = '1.5.3.RELEASE'
        dockerComposeVersion = '0.3.27'
        dockerBuildVersion = '1.2'
    }

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "com.avast.gradle:docker-compose-gradle-plugin:$dockerComposeVersion"
        classpath "se.transmode.gradle:gradle-docker:$dockerBuildVersion"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
    }

}

apply plugin: 'docker-compose'

dockerCompose {
    useComposeFiles = ['docker/generated/docker-compose.yml', 'docker/generated/docker-compose-dev.yml']
    removeContainers = false
    removeImages = "Local"
    removeVolumes = false

}

import org.apache.tools.ant.filters.*

task prepareComposeFile(type: Copy) {
    outputs.upToDateWhen { false }
    from 'docker'
    into 'docker/generated'
    include 'docker-compose-template.yml'
    rename 'docker-compose-template.yml', 'docker-compose.yml'
    filter(ReplaceTokens, tokens: [version: project.properties['version'], group: project.properties['group']])
}

task prepareComposeDevFile(type: Copy) {
    outputs.upToDateWhen { false }
    from 'docker'
    into 'docker/generated'
    include 'docker-compose-dev-template.yml'
    rename 'docker-compose-dev-template.yml', 'docker-compose-dev.yml'
    filter(ReplaceTokens, tokens: [
            database_name: project.properties['database_name'],
            database_password: project.properties['database_password']
    ])
}

composeUp.dependsOn prepareComposeFile
composeUp.dependsOn prepareComposeDevFile

repositories {
    mavenCentral()
}


