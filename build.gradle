allprojects {
    group 'com.birse'
    version '1.0.0-SNAPSHOT'

    apply plugin: 'java'
    apply plugin: 'idea'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

ext.database_name = 'sample'
ext.database_password = 'password'
ext.person_data_service_name = 'person-data-service'
ext.person_service_name = 'person-service'
ext.discovery_service_name = 'discovery-service'


build.enabled = false;
jar.enabled = false;

task wrapper(type: Wrapper) {
    gradleVersion = '4.0'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}


subprojects {

    apply plugin: 'org.springframework.boot'
    apply plugin: 'docker'
    apply plugin: 'jacoco'
    apply plugin: 'org.owasp.dependencycheck'
    apply plugin: 'org.asciidoctor.convert'

    asciidoctor {
        sourceDir 'src/main/asciidoc'
        attributes \
      'snippets': file('build/snippets')
    }


    task prepareDockerFile(type: Copy) {

        ext.applicationName = 'default-service-name'
        outputs.upToDateWhen { false }
        from '../docker/'
        into 'src/main/docker/'
        include 'Dockerfile-template'
        rename 'Dockerfile-template', 'Dockerfile'
        filter {
            it.replaceAll('@version@', project.properties['version']).replaceAll('@app_name@', project.properties['applicationName'])
        }
    }

    task buildDocker(type: Docker, dependsOn: build) {
        push = false
        applicationName = 'default-service-name'
        dockerfile = file('src/main/docker/Dockerfile')
        doFirst {
            copy {
                from jar
                into stageDir
            }
        }
    }

    buildDocker.dependsOn prepareDockerFile

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    check.dependsOn jacocoTestReport



    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
        }
    }

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-actuator")
        compile("org.springframework.boot:spring-boot-devtools")
        compile group: 'de.codecentric', name: 'spring-boot-admin-starter-client', version: '1.5.2'
        testCompile("org.springframework.boot:spring-boot-starter-test")
        testCompile("org.mockito:mockito-core:2.1.0")
        testCompile("org.hamcrest:hamcrest-all:1.3")
    }

    repositories {
        mavenCentral()
    }

    processResources {
        filesMatching("*.properties") {
            expand project.properties
        }
    }

}

buildscript {

    ext {
        springCloudVersion = 'Camden.SR5'
        springBootVersion = '1.5.4.RELEASE'
        dockerComposeVersion = '0.4.5'
        dockerBuildVersion = '1.2'
        owaspVersion = '2.0.1'
        dependencyCheckVersion = '0.15.0'
        asciiDoctorVersion = '1.5.3'
    }

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "com.avast.gradle:docker-compose-gradle-plugin:$dockerComposeVersion"
        classpath "se.transmode.gradle:gradle-docker:$dockerBuildVersion"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "com.github.ben-manes:gradle-versions-plugin:$dependencyCheckVersion"
        classpath "org.owasp:dependency-check-gradle:$owaspVersion"
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:$asciiDoctorVersion"
    }

}

apply plugin: 'docker-compose'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'org.owasp.dependencycheck'

dockerCompose {
    useComposeFiles = ['docker/generated/docker-compose.yml', 'docker/generated/docker-compose-dev.yml']
    removeContainers = false
    removeImages = "Local"
    removeVolumes = false

}

import org.apache.tools.ant.filters.ReplaceTokens

task prepareComposeFile(type: Copy) {
    outputs.upToDateWhen { false }
    from 'docker'
    into 'docker/generated'
    include 'docker-compose-template.yml'
    rename 'docker-compose-template.yml', 'docker-compose.yml'
    filter(ReplaceTokens, tokens: [version: project.properties['version'], group: project.properties['group']])
}

task prepareComposeDevFile(type: Copy) {
    outputs.upToDateWhen { false }
    from 'docker'
    into 'docker/generated'
    include 'docker-compose-dev-template.yml'
    rename 'docker-compose-dev-template.yml', 'docker-compose-dev.yml'
    filter(ReplaceTokens, tokens: [
            database_name    : project.properties['database_name'],
            database_password: project.properties['database_password']
    ])
}

composeUp.dependsOn prepareComposeFile
composeUp.dependsOn prepareComposeDevFile


repositories {
    mavenCentral()
}